<div class="content-page">
    <div class="container-fluid">
        <div class="row">
            <!-- start page title -->
            <div class="row">
                <div class="col-12">
                    <div class="page-title-box">
                        <div class="page-title-right">
                            <ol class="breadcrumb m-0">
                                <li class="breadcrumb-item"><a href="javascript: void(0);">Transantiago App</a></li>
                                <li class="breadcrumb-item"><a href="javascript: void(0);">Páginas</a></li>
                                <li class="breadcrumb-item active">Mapa</li>
                            </ol>
                        </div>
                        <h4 class="page-title">Mapa de la región Metropolitana</h4>
                    </div>
                </div>
            </div>
            <!-- 

                        -->
            <!-- end page title -->
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-center align-items-center">
                        <div class="d-flex flex-column text-center">
                            <form id="horaForm" action="/map" method="GET" onchange="submitForm()">
                                <label for="time" class="form-label">Seleccione una hora:</label>
                                <select id="time" name="time" class="form-select">
                                    <option selected disabled>Seleccione</option>
                                    <option value="05:30:00">5:30:00</option>
                                    <option value="06:00:00">6:00:00</option>
                                    <option value="06:30:00">6:30:00</option>
                                    <option value="07:00:00">7:00:00</option>
                                    <option value="07:30:00">7:30:00</option>
                                    <option value="08:00:00">8:00:00</option>
                                    <option value="08:30:00">8:30:00</option>
                                    <option value="09:00:00">9:00:00</option>
                                    <option value="09:30:00">9:30:00</option>
                                    <option value="10:00:00">10:00:00</option>
                                    <option value="10:30:00">10:30:00</option>
                                    <option value="11:00:00">11:00:00</option>
                                    <option value="11:30:00">11:30:00</option>
                                    <option value="12:00:00">12:00:00</option>
                                    <option value="12:30:00">12:30:00</option>
                                    <option value="13:00:00">13:00:00</option>
                                    <option value="13:30:00">13:30:00</option>
                                    <option value="14:00:00">14:00:00</option>
                                    <option value="14:30:00">14:30:00</option>
                                    <option value="15:00:00">15:00:00</option>
                                    <option value="15:30:00">15:30:00</option>
                                    <option value="16:00:00">16:00:00</option>
                                    <option value="16:30:00">16:30:00</option>
                                    <option value="17:00:00">17:00:00</option>
                                    <option value="17:30:00">17:30:00</option>
                                    <option value="18:00:00">18:00:00</option>
                                    <option value="18:30:00">18:30:00</option>
                                    <option value="19:00:00">19:00:00</option>
                                    <option value="19:30:00">19:30:00</option>
                                    <option value="20:00:00">20:00:00</option>
                                    <option value="20:30:00">20:30:00</option>
                                    <option value="21:00:00">21:00:00</option>
                                    <option value="21:30:00">21:30:00</option>
                                    <option value="22:00:00">22:00:00</option>
                                    <option value="22:30:00">22:30:00</option>
                                    <option value="23:00:00">23:00:00</option>
                                    <option value="23:30:00">23:30:00</option>
                                </select>
                            </form>
                            <p class=""><strong>Hora:</strong> {{hora}}</p>
                            <div class="w-75 h-75" id="map"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>




<!-- -->
<script>
    // Lógica existente para inicializar el mapa (dejamos tu código intacto)

    // Función para obtener la ubicación del usuario
    function obtenerUbicacionUsuario() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition((position) => {
                const lat = position.coords.latitude;
                const lon = position.coords.longitude;

                // Agregar marcador con la ubicación actual
                agregarMarcadorUsuario(lat, lon);
            }, (error) => {
                console.error("Error al obtener la ubicación del usuario:", error);
            });
        } else {
            console.error("El navegador no soporta la geolocalización.");
        }
    }

    // Función para agregar marcador en la ubicación del usuario
    function agregarMarcadorUsuario(lat, lon) {
        const userIcon = L.icon({
            iconUrl: 'media/geolocalizacion.png', // Cambia la ruta del ícono
            iconSize: [32, 32],
            iconAnchor: [16, 32]
        });

        const userMarker = L.marker([lat, lon], { icon: userIcon })
            .addTo(map)
            .bindPopup("<b>Tu ubicación actual</b><br>Lat: " + lat + "<br>Lon: " + lon)
            .openPopup();

        map.setView([lat, lon], 16); // Centrar el mapa en la ubicación
    }

    // Llamar a la función para obtener la ubicación del usuario
    obtenerUbicacionUsuario();
</script>


<!-- -->



<!-- END Contenido dinámico -->
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script>
    // Coordenadas iniciales y niveles de zoom
    const initialCoordinates = [-33.4372, -70.6506]; // Coordenadas de Santiago, Chile
    const initialZoomLevel = 16; // Nivel de zoom inicial
    const minZoomLevel = 13; // Nivel de zoom mínimo permitido
    const maxZoomLevel = 19; // Nivel de zoom máximo permitido

    // Define un nuevo icono personalizado para el paradero de bus
    const busStopIcon = L.icon({
        iconUrl: '{{baseUrl}}/images/busStop.svg',  // Ruta de la imagen del icono de paradero
        iconSize: [32, 32],  // Tamaño del icono (ancho, alto)
        iconAnchor: [16, 32],
        popupAnchor: [0, -32]  // Punto donde aparece el popup en relación al icono
    });

    // Crea un marcador con el icono de paradero de bus
    // const busStopMarker = L.marker([lat, lon], { icon: busStopIcon }).addTo(map).bindPopup(`<b>Paradero {{codigoParadero}}</br>{{latitud}}, {{longitud}}</br> Densidad: {{densidad}}</b></br><b> Comuna: {{comuna}}</b>`).openPopup();

    // Inicializar el mapa con las coordenadas y el nivel de zoom inicial
    var map = L.map('map', {
        center: initialCoordinates,
        zoom: initialZoomLevel,
        minZoom: minZoomLevel,
        maxZoom: maxZoomLevel,
        maxBounds: L.latLngBounds(
            L.latLng(-33.0, -71.0), // Esquina suroeste (lat, lng)
            L.latLng(-33.7, -70.3)  // Esquina noreste (lat, lng)
        )
    });

    // Añadir capa de mapa base (ejemplo con OpenStreetMap)
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: maxZoomLevel,
        attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    // Función para calcular el color del círculo en función del porcentaje (0 a 100)
    function getColorByPercentage(percentage) {
        // Interpolación lineal entre rojo (0%) y azul (100%)
        var red = 255 * (100 - percentage) / 100;
        var blue = 255 * percentage / 100;
        return `rgb(${red}, 0, ${blue})`;
    }

    // Función para calcular el radio en función del tamaño del contenedor del mapa
    function calculateRadius(percentage) {
        var mapContainer = document.getElementById('map');
        var width = mapContainer.clientWidth;
        var height = mapContainer.clientHeight;
        var minDimension = Math.min(width, height);
        return (percentage / 100) * minDimension;
    }

    // Verificar las ubicaciones en la consola
    var locations = {{{ json ubicaciones }}};
    console.log('Ubicaciones en la plantilla:', locations);

    // Array para almacenar los marcadores
    var markers = [];

    // Función para añadir los marcadores al mapa
    function addMarkers() {
        locations.forEach(function (location) {
            if (location.latitud && location.longitud) {
                var marker = L.marker([location.latitud, location.longitud], { icon: busStopIcon });
                // Definir el porcentaje del radio
                var percentage = location.densidad;
                var radiusInPixels = calculateRadius(percentage);

                // Convertir el radio de píxeles a metros (esto es aproximado y depende del nivel de zoom y la latitud)
                var radiusInMeters = map.containerPointToLatLng([0, 0]).distanceTo(map.containerPointToLatLng([radiusInPixels, 0]));

                // Calcular el color del círculo en función del porcentaje
                var color = getColorByPercentage(percentage);

                // Agregar un círculo en la ubicación especificada
                var circle = L.circle([location.latitud, location.longitud], {
                    color: color,
                    fillColor: color,
                    fillOpacity: 0.5,
                    radius: location.densidad // Radio en metros
                }).addTo(map);

                marker.bindPopup(`<b>${location.codigoParadero}</b><br>${location.latitud}, ${location.longitud}<br><b>Densidad: </b>${location.densidad}<br><b> Comuna: ${location.comuna}</br>`);
                markers.push(marker);
            } else {
                console.error('Error en la ubicación:', location.error);
            }
        });

        // Añadir los marcadores al mapa
        markers.forEach(function (marker) {
            marker.addTo(map);
        });
    }

    // Añadir los marcadores iniciales al cargar la página
    addMarkers();

    // Función para actualizar los marcadores visibles
    function updateVisibleMarkers() {
        var bounds = map.getBounds();
        var currentZoom = map.getZoom();

        // Verificar el nivel de zoom
        if (currentZoom >= 16 && currentZoom <= 19) {
            markers.forEach(function (marker) {
                var isVisible = bounds.contains(marker.getLatLng());
                if (isVisible) {
                    marker.addTo(map);
                } else {
                    map.removeLayer(marker);
                }
            });
        } else {
            // Si el zoom no está en el rango deseado, ocultar todos los marcadores
            markers.forEach(function (marker) {
                map.removeLayer(marker);
            });
        }
    }

    // Llamar a updateVisibleMarkers al iniciar y al mover el mapa
    map.on('moveend', function () {
        updateVisibleMarkers();
    });


</script>
<script>
    function submitForm() {
        document.getElementById('horaForm').submit();
    }
</script>